import os
import re
import sys
import tempfile


def get_assembler(config):
    norm = "normalization_k%d_t%d" % (config.get("normalization_kmer_length", 21),
                                      config.get("normalization_target_depth", 100))
    if config.get("assembler") == "spades":
        return "spades_{k}_{norm}".format(k=config.get("spades_k", "auto").replace(",", "_"), norm=norm)
    else:
        k_min = config.get("megahit_k_min", 21)
        k_max = config.get("megahit_k_max", 121)
        k_step = config.get("megahit_k_step", 20)
        return "megahit_{min}_{max}_{step}_{norm}".format(min=k_min, max=k_max, step=k_step, norm=norm)


def get_temp_dir(config):
    if config.get("tmpdir"):
        return config["tmpdir"]
    else:
        return tempfile.gettempdir()


def bin_summary_files(do_binning, samples, assembler):
    if do_binning:
        return expand("{sample}/{assembler}/genomic_bins/{sample}.summary", sample=samples, assembler=assembler)
    else:
        # the user has opted out of performing binning
        return ""


def get_shell_prefix(config, override={}):
    pfx = config.get("prefix")
    if not pfx:
        return ""

    keys = re.findall(r"__(\w+)__", pfx)
    for k in keys:
        if k in override:
            v = override[k]
        else:
            v = config.get(k, "")
        pfx = pfx.replace("__{key}__".format(key=k), str(v))
    return pfx


def update_config_file_paths(config):
    for sample in config["samples"]:
        try:
            # convert string into list
            if isinstance(config["samples"][sample]["fastq"], str):
                config["samples"][sample]["fastq"] = [config["samples"][sample]["fastq"]]
        # fastq is not required for annotation alone
        except KeyError:
            continue
    return config


if config.get("workflow", "complete") == "complete":
    config = update_config_file_paths(config)
    SHPFXM = get_shell_prefix(config)
    SHPFXS = get_shell_prefix(config, {"threads":"1"})

    # TABLES = get_count_tables(config, "summary_counts")
    TMPDIR = get_temp_dir(config)
    NORMALIZATION = "normalization_k%d_t%d" % (config["preprocessing"]["normalization"].get("k", 21),
                                               config["preprocessing"]["normalization"].get("t", 100))
    ASSEMBLER = get_assembler(config)

    SAMPLES = [i for i in config["samples"].keys()]

    wildcard_constraints:
        sample = "[\w-]+"

    rule all:
        input:
            expand("{sample}/quality_control/decontamination/{sample}_{decon_dbs}.fastq.gz",
                sample=SAMPLES,
                decon_dbs=list(config["preprocessing"]["contamination"]["references"].keys())),
            expand("{sample}/quality_control/decontamination/{sample}_refstats.txt",
                sample=SAMPLES),
            expand("{sample}/quality_control/quality_filter/{sample}_se.fastq.gz",
                sample=SAMPLES),
            expand("{sample}/logs/{sample}_quality_filtering_stats.txt",
                sample=SAMPLES),
            expand("{sample}/{assembler}/contig_stats/prefilter_contig_stats.txt",
                sample=SAMPLES,
                assembler=ASSEMBLER),
            expand("{sample}/{assembler}/contig_stats/final_contig_stats.txt",
                sample=SAMPLES,
                assembler=ASSEMBLER),
            bin_summary_files(config.get("perform_genome_binning", True), SAMPLES, ASSEMBLER),
            expand("{sample}/{assembler}/functional_annotation/{sample}_annotations.txt",
                sample=SAMPLES,
                assembler=ASSEMBLER)

    include: "rules/assemble.snakefile"

elif config.get("workflow") == "download":

    FILES = ["silva_rfam_all_rRNAs.fa", "adapters.fa", "phiX174_virus.fa", "refseq.db",
             "refseq.dmnd", "refseq.tree"]

    rule all:
        input:
            expand("{dir}/{filename}", dir=os.path.realpath(config["db_dir"]), filename=FILES)

    include: "rules/download.snakefile"

elif config.get("workflow") == "annotate":
    config = update_config_file_paths(config)
    SAMPLES = list(config["samples"].keys())
    TMPDIR = get_temp_dir(config)
    SHPFXM = get_shell_prefix(config)
    SHPFXS = get_shell_prefix(config, {"threads":"1"})

    rule all:
        input:
            expand("{sample}_annotations.txt", sample=SAMPLES),
            expand("{sample}/contig_stats.txt", sample=SAMPLES)

    include: "rules/annotate.snakefile"

else:
    print("Workflow %s is not a defined workflow." % config.get("workflow", "[no --workflow specified]"),
          file=sys.stderr)
