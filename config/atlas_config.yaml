# prototype stuffs
data_type: Metagenome
# sliding_window OR expected_error
qual_method: sliding_window

# regular stuffs
eid: test
# can be removed or set to '' to disable
temporary_directory: /scratch
phred_offset: 33


# some tasks in the workflow are single threaded, so leaving one or two open
# cores can improve throughput
threads: 23
filtering:
    # fastas to parse into kmers which are then trimmed from the sequences
    adapters: ref/adapters.fa.gz
    # Look for shorter kmers at read tips down to this length; 0 disables
    mink: 8
    # lower than 20 to allow overlap the chance to increase the quality
    minimum_base_quality: 10
    # kmer mismatches allowed during adapter trim process
    allowable_kmer_mismatches: 1
    # length of kmer to search against sequences
    reference_kmer_match_length: 31
    # passing single-end read length, prior to merging
    minimum_passing_read_length: 51
    ## Optional VSEARCH MAX EE filter
    # after merging; the allowable limit of erroneous bases; accepts fractions as well
    maximum_expected_error: 5
    # maximum number of N's for FASTQ filter
    maxns: 5
    ## TRIMMOMATIC quality trimming/filtering
    # adapter mismatch, palindrome clip threshold, and simple clip threshold (the values are nonsensical), e.g. 2:30:10
    adapter_clip: "2:30:10"
    # Cut bases off the start of a read, if below this quality
    leading: 15
    # Cut bases off the end of a read, if below this quality
    trailing: 15
    # specifies the number of bases to average across and required quality, e.g. 4:15
    window_size_quality: "8:25"
    # The number of bases to keep, from the start of the read; 0 disables
    crop: 0
    # The number of bases to remove from the start of the read; 0 disables
    headcrop: 0

merging:
    minimum_overlap: 30
    maximum_overlap: 220
    maximum_mismatch_density: 0.25

contamination_filtering:
    references:
        phiX: databases/contaminant/phiX174_virus.fa
        # this key [rRNA] and case is required
        rRNA: databases/contaminant/silva_rfam_all_rRNAs.fa
    # Don't look for indels longer than this
    maxindel: 20
    # Fraction of max alignment score required to keep a site
    minratio: 0.65
    # mapping kmer length; range 8-15; longer is faster but uses more memory; shorter is more sensitive
    k: 12
    # Minimum number of seed hits required for candidate sites
    minhits: 1
    # Set behavior on ambiguously-mapped reads (with multiple top-scoring mapping locations).
    #   best    (use the first best site)
    #   toss    (consider unmapped)
    #   random  (select one top-scoring site randomly)
    #   all     (retain all top-scoring sites.  Does not work yet with SAM output)
    ambiguous: best

assembly:
    # fraction of the machine's total memory or bytes
    memory: 0.99
    # minimum multiplicity for filtering (k_min+1)-mers
    minimum_count: 2
    # minimum kmer size (<= 255), must be odd number
    kmer_min: 21
    # maximum kmer size (<= 255), must be odd number
    kmer_max: 121
    # increment of kmer size of each iteration (<= 28), must be even number
    kmer_step: 20
    # merge complex bubbles of length <= l*kmer_size and similarity >= s
    merge_level: 20,0.98
    # strength of low depth pruning (0-3)
    prune_level: 2
    # ratio threshold to define low local coverage contigs
    low_local_ratio: 0.2
    # minimum length of contigs to output
    minimum_contig_length: 200
    filtered_contig_length: 300

annotation:
    # databases/functional/<example1>.fasta
    # databases/functional/<example2>.fasta
    # references: example1,example2
    references: eggnog4,refseq78_nonredundant
    # https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi
    translation_table: 11
    # when counting reads aligning to ORFs, require at least this many bp
    # overlapping the ORF
    minimum_overlap: 20
    # number of entries per FASTA to be aligned with DIAMOND
    chunk_size: 200000

    ## local alignment settings
    # setting top_seqs to 5 will report all alignments whose score is at most 5% lower than the top alignment score for a query
    top_seqs: 5
    # maximum e-value to report alignments
    e_value: "0.000001"
    # minimum identity % to report an alignment
    min_identity: 50
    # minimum query cover % to report an alignment
    query_coverage: 60
    # gap open penalty
    gap_open: 11
    # gap extension penalty
    gap_extend: 1
    # Block size in billions of sequence letters to be processed at a time.
    # This is the main parameter for controlling DIAMOND's memory usage.
    # Bigger numbers will increase the use of memory and temporary disk space,
    # but also improve performance. The program can be expected to roughly use
    # six times this number of memory (in GB).
    block_size: 4
    # The number of chunks for processing the seed index (default=4). This
    # option can be additionally used to tune the performance. It is
    # recommended to set this to 1 on a high memory server, which will
    # increase performance and memory usage, but not the usage of temporary
    # disk space.
    index_chunks: 4

    ## blast parser
    # 'lca', 'majority', or 'best'; summary method for annotating ORFs; when
    # using LCA, it's recommended that one limits the number of hits using a
    # low top_fraction
    # 'best' is fastest
    summary_method: best
    # 'lca', 'lca-majority', or 'majority'; summary method for aggregating ORF
    # taxonomic assignments to contig level assignment; 'lca' will result in
    # most stringent, least specific assignments
    aggregation_method: lca-majority
    # constitutes a majority fraction at tree node for 'lca-majority' ORF
    # aggregation method
    majority_threshold: 0.51
    # minimum allowable BLAST alignment length
    min_length: 60
    # maximum allowable e-value of BLAST hit
    max_evalue: 0.000001
    # maximum number of BLAST hits to consider when summarizing ORFs; can
    # drastically alter ORF LCA assignments if too high without further limits
    max_hits: 10
    # 1 to disable; filters ORF BLAST hits by only keep hits within this
    # fraction of the highest bitscore; this is recommended over max_hits
    top-fraction: 1

binning:
    threads: 12
    minimum_contig_length: 1000
    # iterations of Expectation-Maximization algorithm
    maximum_iterations: 50
    # probability threshold for EM final classification
    probability_threshold: 0.9
    # By default MaxBin will look for 107 marker genes present in >95% of bacteria.
    # Alternatively you can also choose 40 marker gene sets that are universal
    # among bacteria and archaea (Wu et al., PLoS ONE 2013). This option may
    # be better suited for environment dominated by archaea; however it tends
    # to split genomes into more bins.
    marker_set: 107

summary_counts:
    # Possible columns table column values upon which to aggregate:
        # contig, orf, taxonomy, orf_taxonomy, refseq_product, uniprot_ac
        # eggnog_ssid_b, eggnog_species_id, uniprot_id, cog_func_id, cog_id,
        # cog_product, cog_level1_code, cog_level1_name, cog_level2_name,
        # cazy_id1, cazy_id2, cazy_class, cazy_clan, cazy_product, cazy_gene_id,
        # cazy_taxa, cazy_ec, ko_id, ko_level1_name, ko_level2_name, ko_level3_id,
        # ko_level3_name, ko_gene_symbol, ko_product, ko_ec

    # this is a special case to allow for taxon level specification
    taxonomy:
        # limit taxonomy in classification to the depth specified
        # possible values: kingdom, domain, phylum, class, order, family, genus, species
        # all levels if omitted
        levels:
            - phylum
            - class
            - order
            - species
        # tables to generate at these taxonomic levels
        KO:
            - ko_id
            - ko_ec
        COG:
            - cog_id
        CAZY:
            - cazy_id1
            - cazy_ec
    KO:
        - ko_id
        - ko_gene_symbol
        - ko_product
        - ko_ec
    KO_lvl1:
        - ko_level1_name
    KO_lvl2:
        - ko_level2_name
    KO_lvl3:
        - ko_level3_name
    EC:
        - ko_ec
    COG:
        - cog_id
        - cog_product
    COG_lvl1:
        - cog_level1_name
        - cog_level2_name
    Uniprot:
        - uniprot_ac
        - cazy_id1
        - cazy_class
        - cazy_product
        - cazy_ec
        - cazy_gene_id
        - cazy_taxa
        - cazy_id1
        - cazy_class
