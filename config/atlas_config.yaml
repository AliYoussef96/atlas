samples:
    # sample ID
    shewanella:
        path:
            - /pic/projects/mint/genomic_truth_sets/203_TTAGGC_L002_R1_140814.fastq.gz
            - /pic/projects/mint/genomic_truth_sets/203_TTAGGC_L002_R2_140814.fastq.gz
        type: metagenome
    cytophaga:
        path:
            - /pic/projects/mint/genomic_truth_sets/200_ATTCCT_L005_R1_001.fastq.gz
            - /pic/projects/mint/genomic_truth_sets/200_ATTCCT_L005_R2_001.fastq.gz
    flavobacterium:
        path:
            - /pic/projects/mint/genomic_truth_sets/201_GAGTGG_L002_R1_140814.fastq.gz
            - /pic/projects/mint/genomic_truth_sets/201_GAGTGG_L002_R2_140814.fastq.gz
    xylanimonas:
        path:
            - /pic/projects/mint/genomic_truth_sets/202_AGTTCC_L003_R1_001.fastq.gz
            - /pic/projects/mint/genomic_truth_sets/202_AGTTCC_L003_R2_001.fastq.gz
    aspergillus:
        path:
            - /pic/projects/mint/genomic_truth_sets/204_TAGCTT_L008_R1_001.fastq.gz
            - /pic/projects/mint/genomic_truth_sets/204_TAGCTT_L008_R2_001.fastq.gz
    yarrowia:
        path:
            - /pic/projects/mint/genomic_truth_sets/205_GGCTAC_L008_R1_001.fastq.gz
            - /pic/projects/mint/genomic_truth_sets/205_GGCTAC_L008_R2_001.fastq.gz
    coassemblies:
        test-coa:
            - shewanella
            - cytophaga
            - flavobacterium

tmpdir: /scratch
# sets threads for all methods that are not single-threaded
threads: 23
# shell command prefix; useful for unconventional job queue situations
# prefix: "srun --exclusive -N1 -n1 -c"
preprocessing:

    # fastas to parse into kmers which are then trimmed from the sequences
    adapters: /pic/projects/mint/atlas_databases/adapters.fa
    # Look for shorter kmers at read tips down to this length; 0 disables
    mink: 8
    minimum_base_quality: 10
    # kmer mismatches allowed during adapter trim process
    allowable_kmer_mismatches: 1
    # length of kmer to search against sequences
    reference_kmer_match_length: 31
    # passing single-end read length, prior to merging
    minimum_passing_read_length: 51
    # Discard reads with a minimum base frequency below this
    min_base_frequency: 0.05

    contamination:
        references:
            # this key ('rRNA') is required
            rRNA: /pic/projects/mint/atlas_databases/silva_rfam_all_rRNAs.fa
            phiX: /pic/projects/mint/atlas_databases/phiX174_virus.fa
        # Don't look for indels longer than this
        maxindel: 20
        # Fraction of max alignment score required to keep a site
        minratio: 0.65
        # mapping kmer length; range 8-15; longer is faster but uses more memory; shorter is more sensitive
        k: 12
        # Minimum number of seed hits required for candidate sites
        minhits: 1
        # Set behavior on ambiguously-mapped reads (with multiple top-scoring mapping locations):
        #   best    (use the first best site)
        #   toss    (consider unmapped)
        #   random  (select one top-scoring site randomly)
        #   all     (retain all top-scoring sites)
        ambiguous: best

    normalization:
        # kmer length
        k: 19
        # target normalization depth
        t: 100
        # reads must have at least this many kmers over min depth to be retained
        minkmers: 8

assembly:
    # 'spades' or 'megahit'
    assembler: megahit
    # fraction of the machine's total memory or bytes
    memory: 0.99
    # minimum multiplicity for filtering (k_min+1)-mers
    minimum_count: 2
    # minimum kmer size (<= 255), must be odd number
    kmer_min: 21
    # maximum kmer size (<= 255), must be odd number
    kmer_max: 121
    # increment of kmer size of each iteration (<= 28), must be even number
    kmer_step: 20
    # merge complex bubbles of length <= l*kmer_size and similarity >= s
    merge_level: 20,0.98
    # strength of low depth pruning (0-3)
    prune_level: 2
    # ratio threshold to define low local coverage contigs
    low_local_ratio: 0.2
    # minimum length of contigs to output from the assembler; can be filtered
    # downstream using minl
    minimum_contig_length: 200
    # comma-separated list of k-mer sizes (must be odd and less than 128)
    spades_k: auto
    # Discard contigs with lower average coverage.
    minc: 5
    # Discard contigs with a lower percent covered bases.
    minp: 40
    # Discard contigs with fewer mapped reads.
    minr: 0
    # Discard contigs shorter than this (after trimming).
    minl: 250
    # Trim the first and last X bases of each sequence.
    trim: 0

annotation:
    ## ORFs
    # https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi
    translation_table: 11
    # when counting reads aligning to ORFs, require at least this many bp
    # overlapping the ORF
    minimum_overlap: 20

    references:
        eggnog:
            # non-tree based reference requires namemap database and fasta
            namemap: /pic/projects/mint/atlas_databases/eggnog.db
            dmnd: /pic/projects/mint/atlas_databases/eggnog.dmnd
            # number of entries per FASTA to be aligned with DIAMOND
            chunk_size: 250000
            # 'fast' or 'sensitive'
            run_mode: fast
            # setting top_seqs to 5 will report all alignments whose score is
            # at most 5% lower than the top alignment score for a query
            top_seqs: 5
            # maximum e-value to report alignments
            e_value: "0.000001"
            # minimum identity % to report an alignment
            min_identity: 50
            # minimum query cover % to report an alignment
            query_coverage: 60
            # gap open penalty
            gap_open: 11
            # gap extension penalty
            gap_extend: 1
            # Block size in billions of sequence letters to be processed at a time.
            # This is the main parameter for controlling DIAMOND's memory usage.
            # Bigger numbers will increase the use of memory and temporary disk space,
            # but also improve performance. The program can be expected to roughly use
            # six times this number of memory (in GB).
            block_size: 4
            # The number of chunks for processing the seed index (default=4). This
            # option can be additionally used to tune the performance. It is
            # recommended to set this to 1 on a high memory server, which will
            # increase performance and memory usage, but not the usage of temporary
            # disk space.
            index_chunks: 4
            # 'majority' or 'best'; summary method for annotating ORFs
            summary_method: best
            # minimum allowable BLAST alignment length
            min_length: 60
            # maximum allowable e-value of BLAST hit when parsing DIAMOND hits
            max_evalue: 0.000001
            # maximum number of BLAST hits to consider when summarizing ORFs
            max_hits: 10
            # filters ORF BLAST hits by only keep hits within this fraction of
            # the highest bitscore; this is recommended over max_hits
            top_fraction: 0.50
            # minimum allowable BLAST alignment bitscore; 0 effectively disables
            min_bitscore: 0
        refseq:
            # tree based reference requires namemap database, tree, and diamond formatted fasta
            namemap: /pic/projects/mint/atlas_databases/refseq.db
            tree: /pic/projects/mint/atlas_databases/refseq.tree
            dmnd: /pic/projects/mint/atlas_databases/refseq.dmnd
            # number of entries per FASTA to be aligned with DIAMOND
            chunk_size: 250000
            run_mode: fast
            top_seqs: 5
            e_value: "0.000001"
            min_identity: 50
            query_coverage: 60
            gap_open: 11
            gap_extend: 1
            block_size: 6
            index_chunks: 1
            # 'lca', 'majority', or 'best'; summary method for annotating ORFs; when
            # using LCA, it's recommended that one limits the number of hits using a
            # low top_fraction
            summary_method: best
            # 'lca', 'lca-majority', or 'majority'; summary method for aggregating ORF
            # taxonomic assignments to contig level assignment; 'lca' will result in
            # most stringent, least specific assignments
            aggregation_method: lca-majority
            # constitutes a majority fraction at tree node for 'lca-majority' ORF
            # aggregation method
            majority_threshold: 0.51
            # minimum allowable BLAST alignment length
            min_length: 60
            # maximum allowable e-value of BLAST hit
            max_evalue: 0.000001
            # maximum number of BLAST hits to consider when summarizing ORFs; can
            # drastically alter ORF LCA assignments if too high without further limits
            max_hits: 10
            top_fraction: 0.50
        expazy:
            namemap: /pic/projects/mint/atlas_databases/expazy.db
            dmnd: /pic/projects/mint/atlas_databases/expazy.dmnd
            chunk_size: 500000
            # 'fast' or 'sensitive'
            run_mode: fast
            top_seqs: 2
            index_chunks: 1
            summary_method: majority
        cazy:
            namemap: /pic/projects/mint/atlas_databases/cazy.db
            dmnd: /pic/projects/mint/atlas_databases/cazy.dmnd
            chunk_size: 500000
            # 'fast' or 'sensitive'
            run_mode: fast
            top_seqs: 2
            index_chunks: 1
            summary_method: majority
        cog:
            namemap: /pic/projects/mint/atlas_databases/cog.db
            dmnd: /pic/projects/mint/atlas_databases/cog.dmnd
            chunk_size: 500000
            # 'fast' or 'sensitive'
            run_mode: fast
            top_seqs: 2
            index_chunks: 1
            summary_method: majority

summary_counts:
    # Possible columns table column values upon which to aggregate:
        # contig, orf

        # from refseq:
        # taxonomy, orf_taxonomy, refseq_product

        # from eggnog:
        # uniprot_ac, eggnog_ssid_b, eggnog_species_id, uniprot_id,
        # ko_id, ko_level1_name, ko_level2_name, ko_level3_id,
        # ko_level3_name, ko_gene_symbol, ko_product, ko_ec

        # from expazy:
        # expazy_name, expazy_ec

        # from cazy (dbcan):
        # cazy_gene, cazy_family, cazy_class, cazy_ec

        # from cog
        # cog_protein_id, cog_id, cog_functional_class, cog_annotation
        # cog_functional_class_description

    # this is a special case to allow for taxon level specification
    taxonomy:
        # limit taxonomy in classification to the depth specified
        # possible values: kingdom, domain, phylum, class, order, family, genus, species
        # all levels if omitted
        levels:
            - phylum
            - class
            - order
            - species
        # tables to generate at these taxonomic levels
        KO:
            - ko_id
            - ko_ec
        COG:
            - cog_id
            - cog_functional_class
            - cog_annotation
        CAZy_EC:
            - cazy_ec
        CAZy_family:
            - cazy_family
        ExPAZy:
            - expazy_name
            - expazy_ec
        RefSeq:
            - refseq_product
    KO:
        - ko_id
        - ko_gene_symbol
        - ko_product
        - ko_ec
    KO_lvl1:
        - ko_level1_name
    KO_lvl2:
        - ko_level2_name
    KO_lvl3:
        - ko_level3_name
    CAZY_EC:
        - cazy_ec
    COG:
        - cog_id
        - cog_functional_class
        - cog_annotation
    ExPAZy:
        - expazy_name
        - expazy_ec
    RefSeq:
        - refseq_product
